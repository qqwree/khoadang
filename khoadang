* {
    margin: 0;
    box-sizing: border-box; /* padding and border incleded in the width/height */
}
body {
    font-family: Arial, Helvetica, sans-serif;
}
select {
    -webkit-appearance: none;
    -moz-appearance: none;
    padding: 5px 25px 5px 5px;
    background: url('../img/dr_down_16.png') no-repeat right;
    background-position-x: calc(100% - 5px);
}
select::-ms-expand {
    display: none;
}
.wrapper {
    width: 100vw;
    height: 100vh;
    overflow-y: hidden;
    overflow-x: hidden;
}
.row {
    width: 100%;
    height: 50%;
    margin: 0;
}
.cell {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-user-select: none;
    -moz-user-select: -moz-none;
    -ms-user-select: none;
    user-select: none;
    justify-content: center; /* align horizontal */
    align-items: center;
    float: left;
    padding: 0;
    width: 50%;
    height: 100%;
    border: 1px solid #ccc;
    cursor: default;
    font-size: calc(8vmin);
    font-weight: bold;
    transition: background 800ms;
}
.rotate-90 {
    -moz-transform: rotate(90deg);
    -ms-transform: rotate(90deg); /* IE 9 */
    -webkit-transform: rotate(90deg);
    transform: rotate(90deg);
}
.rotate-180 {
    -moz-transform: rotate(180deg);
    -ms-transform: rotate(180deg); /* IE 9 */
    -webkit-transform: rotate(180deg);
    transform: rotate(180deg);
}
.rotate-270 {
    -moz-transform: rotate(270deg);
    -ms-transform: rotate(270deg); /* IE 9 */
    -webkit-transform: rotate(270deg);
    transform: rotate(270deg);
}
.spin-right {
    animation: spin-right 2s infinite linear;
    -webkit-animation: spin-right 2s infinite linear;
    -moz-animation: spin-right 2s infinite linear;
}
    @keyframes spin-right{
        0% {
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
        }
        100% {
            -moz-transform: rotate(359deg);
            -ms-transform: rotate(359deg);
            -webkit-transform: rotate(359deg);
            transform: rotate(359deg);
        }
    }
    @-webkit-keyframes spin-right{
        0% {
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg)
        }
        100% {
            -ms-transform: rotate(359deg);
            -moz-transform: rotate(359deg);
            -webkit-transform: rotate(359deg);
            transform: rotate(359deg)
        }
    }
.spin-left {
    animation: spin-left 2s infinite linear;
    -webkit-animation: spin-left 2s infinite linear;
    -moz-animation: spin-left 2s infinite linear;
}
    @keyframes spin-left{
        0% {
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
        }
        100% {
            -moz-transform: rotate(-359deg);
            -ms-transform: rotate(-359deg);
            -webkit-transform: rotate(-359deg);
            transform: rotate(-359deg);
        }
    }
    @-webkit-keyframes spin-left{
        0% {
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg)
        }
        100% {
            -moz-transform: rotate(-359deg);
            -ms-transform: rotate(-359deg);
            -webkit-transform: rotate(-359deg);
            transform: rotate(-359deg)
        }
    }
.cell-symbol {
    color: inherit;
    font-size: calc(8vmin);
    font-weight: bold;
}
.normal-cell {
    color: black;
    background: white;
}
.hovered-cell {
    color: black;
    /*background: rgb(249, 246, 243);*/
    border: 1px solid #555;
}

.traced-cell {
    color: black;
    background: #f1f9f0;
    background: #b5fcac;
}

.selected-cell {
    color: white;
    background: navy;
}

.correct-cell {
    color: black;
    background: #bbf4b8;
    background: #b5fcac;
}

.wrong-cell {
    color: black;
    background: #f4adad;
}
.color-num {
    padding: 3px 10px;
    margin-right: 2px;
    margin-bottom: 5px;
    display: inline-block;
    border: 1px solid #ccc;
    font-size: 1.1em;
    font-weight: bold;
}
#settings-btn {
    position: fixed;
    right: 0;
    top: 0;
    width: 5vmin;
    height: 5vmin;
    padding: 0;
    background: transparent url('../img/settings_48.png') no-repeat;
    background-size: 5vmin 5vmin;
    opacity: 0.10;
    border: none;
    outline-style: none;
    transition: opacity 500ms;
}
#settings-btn:hover {
    opacity: 1;
}
.grid-input {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1;
}
.hover-text-bold:hover {
    font-weight: bold;
}
.display-block {
    display: block;
}
.display-none {
    display: none;
}
.mouse-map {
    background: white;
    border: 2px solid #ccc;
}
.center-dot {
    position:absolute;
    top:50%;
    left:50%;
    width: 10px;
    height: 10px;
    -ms-transform: translateX(-50%) translateY(-50%);
    -webkit-transform: translate(-50%,-50%);
    transform: translate(-50%,-50%);
    pointer-events: none;
    background: url('../img/green_dot.png');
}
  18  
index.html
@@ -25,12 +25,12 @@
            <div v-for="c in gridRange" class="cell" :style="{width: colWidth}"
                 @mouseover="hoveredCell = r*gridSize + c"
                 @mouseleave="hoveredCell = -1"
                 @click="setClickedCell(r*gridSize + c, $event)"
                 :class="{'normal-cell' : !showHover && !showClickAnimation,
                          'hovered-cell': showHover && (hoveredCell == r*gridSize + c),
                          'correct-cell': showClickAnimation && (clickedCell == r*gridSize + c) && clickedCell == correctIndex,
                          'wrong-cell'  : showClickAnimation && (clickedCell == r*gridSize + c) && clickedCell != correctIndex,
                          'traced-cell' : showTrace && tracedCell(r*gridSize + c)
                 @mousedown="setClickedCell(r*gridSize + c, $event)"
                 :class="{'normal-cell' : (!showHover && !showClickAnimation) || !gameStarted,
                          'hovered-cell': showHover && (hoveredCell == r*gridSize + c) && gameStarted,
                          'correct-cell': showClickAnimation && (clickedCell == r*gridSize + c) && clickedCell == correctIndex && gameStarted,
                          'wrong-cell'  : showClickAnimation && (clickedCell == r*gridSize + c) && clickedCell != correctIndex && gameStarted,
                          'traced-cell' : showTrace && tracedCell(r*gridSize + c) && gameStarted
                          }">
                <span :class="[cells[r*gridSize + c].cssClasses]"
                      :style="cells[r*gridSize + c].colorStyle"
@@ -146,6 +146,8 @@ <h2>Schulte Table Test</h2>
                                      v-if="groupCount == 4"
                                      v-html="groupRange(3)"></div>
                            </div>
							<input class="w3-check" type="checkbox" v-model="collateGroups" style="margin-top: 5px;">
                            <label class="w3-validate">Collate Groups </label>
                        </div>
                    </div>
                    <!--<div class="w3-row" >-->
@@ -191,10 +193,10 @@ <h2>Schulte Table Test</h2>
                                <label class="w3-validate">Show Hover</label> </p>
                            <p>
                                <input class="w3-check" type="checkbox" v-model="showTrace">
                                <label class="w3-validate">Show Trace</label> </p>
                                <label class="w3-validate">Show Correct Cells</label> </p>
                            <p>
                                <input class="w3-check" type="checkbox" v-model="showClickResult">
                                <label class="w3-validate">Show Click Result</label> </p>
                                <label class="w3-validate">Show Wrong Clicks</label> </p>
                            <p>
                                <input class="w3-check" type="checkbox" v-model="showCenterDot">
                                <label class="w3-validate">Show Center Dot</label> </p>
  22  
js/schulte.js
@@ -49,6 +49,7 @@ var appData = {
    inverseCount: false,
    divergentCount: false,
    variousCounts: false,
	collateGroups: false,
    timerMode: false,
    timerMinutes: 5,
    currGroup: 0,
@@ -110,16 +111,15 @@ var appData = {
        },
        timeDiff: function () {
            var diff = (this.stopTime - this.startTime); // milliseconds between
			var millis = Math.floor(diff % 1000);
            diff = diff / 1000;
            var seconds = Math.floor(diff % 60);
            diff = diff / 60;
            var minutes = Math.floor(diff % 60);
            diff = diff / 60;
            var hours = Math.floor(diff % 24);
            var minutes = Math.floor(diff);

            return ("0" + hours).slice (-2) + ':' +
                   ("0" + minutes).slice (-2) + ':' +
                   ("0" + seconds).slice (-2);
            return minutes + ':' +
                   ("0" + seconds).slice (-2) + '.' +
				   ("00" + millis).slice (-3);
        }
    }
};
@@ -176,6 +176,9 @@ vueApp = new Vue({
        variousCounts: function () {
            this.initGame();
        },
		collateGroups: function () {
			this.initGame();
		},
        spinSymbols: function () {
            this.updateSymbolSpins();
        },
@@ -354,7 +357,12 @@ vueApp = new Vue({
            if (num > 0 || num < this.groups[this.currGroup].size) {
                this.groups[this.currGroup].currNum = num;
            }
            this.nextGroup();
			if (this.collateGroups) {
				this.nextGroup();
			} else if (num == this.groups[this.currGroup].size + 1) {
				num = 1;
				this.nextGroup();
			}
        },
        nextGroup: function () {
            this.currGroup = (this.currGroup + 1) % this.groupCount; // round it
